
<#

.SYNOPSIS
    Generates an import block for the terraform configuration on the current path.

.DESCRIPTION
    Generates an import block for the terraform configuration on the current path.


.EXAMPLE
    
    Create a import-block for a user assigned identity in the current configuration from the current subscription:

    Set correct context for azure resources as necessary:
        - Connect-AzAccount
        - Set-AzContext
        - Set-AzSubscription

    PS> tf-azimport <autocompleted_path> <autocompleted_resources>

    PS> tf-azimport module.blueprint_foundations_governance.module.managed_identity.azurerm_user_assigned_identity.identity rg-ident-test-001/id-test-001

.LINK
  
#>


function New-TerraformAzureImportStatement {

    [CmdletBinding()]
    [Alias('tf-import')]
    param (
        
        # The path to the module resource
        [Parameter(
            Position = 0,
            Mandatory = $true
        )]
        [System.String]
        [ArgumentCompleter(
            {
                param($cmd, $param, $wordToComplete, $commandAst, $fakeBoundParameters)

                $validValues = (Get-TerraformModuleCalls).fullPaths
                | Where-Object -Property Length -GT 0
                
                $validValues 
                | Where-Object { $_.toLower() -like "*$wordToComplete*".toLower() } 
                | ForEach-Object { $_.contains(' ') ? "'$_'" : $_ } 
            }
        )]
        [ValidateScript(
            {
                $_ -in (Get-TerraformModuleCalls).fullPaths
            },
            ErrorMessage = "Not a valid module path in the current path."
        )]
        $ResourcePath,

        # The corresponding resource in the azure cloud
        [Parameter(
            Position = 1,
            Mandatory = $true
        )]
        [System.String]
        [ArgumentCompleter(
            {
                param($cmd, $param, $wordToComplete, $commandAst, $fakeBoundParameters)
                    
                $validValues = (Get-ProviderResources -ProviderResource $fakeBoundParameters['ResourcePath']).slug

                $validValues 
                | Where-Object { $_.toLower() -like "*$wordToComplete*".toLower() } 
                | ForEach-Object { $_.contains(' ') ? "'$_'" : $_ } 
            }
        )]
        $Name
    )
    
    $azureResource = Get-ProviderResources -ProviderResource $PSBoundParameters['ResourcePath']
    | Where-Object -Property slug -EQ $Name

    
    $importStatement = @"
import {
    id = "$($azureResource.importId)"
    to = $ResourcePath
}
"@

    $importStatement | Set-Clipboard



    $outFile = "./_autogenerated.imports.tf"
    $fileContent = ""
    if ((Test-Path -Path $outFile)) {
        $fileContent = Get-Content -Raw -Path $outFile
    }

    if ($fileContent -like "*$importStatement*") {
        throw "Already being imported"
    }

    $fileContent = $fileContent + $importStatement
    $fileContent | Out-File -FilePath $outFile

    return $importStatement
}


<#

(Get-terraformProviderInfo -provider hashicorp/azurerm).docs
| Where-Object -Property category -EQ resources
| Where-Object -Property language -EQ hcl
| ForEach-Object {
    return [PSCustomObject]@{
        id          = $_.id
        title       = $_.title
        slug        = $_.slug
        subcategory = $_.subcategory
        azureType   = $null
    }
}
| ConvertTo-Json
| Out-File azurerm.resources.json



$file = Get-Item -Path ".\azurerm.resources.json"
$data = Get-Content -Path $file 
| ConvertFrom-Json 
| ForEach-Object {

    if ($null -EQ $_.azureType) {
        $title = $_.slug -replace '_', ''
        $type = Get-AzureResourceTypes 
        | Where-Object {
            $_ -like "*$title*"
        }
        | Select-Object -First 1

        if ($null -NE $type) {
            $_.azureType = $type
            Write-Host $title, $type
        }
    }

    return $_
}
| ConvertTo-Json
$data | Out-File $file


#>